1. html 
	超级文本标记语言
2. 网络概念
	Http  超文本传输协议
	uri 	统一资源标识符
3. html网页
	1) 开发流程
		1.1 编写网页 （sublime/vscode）
		1.2 本地测试
		元素
			开始标签，子元素，结束标签
			<div id='one'>hello world</div>
			<div>
				<span>hello world</span>
			</div>
		属性
			1)核心属性（绝大多数标签都可以应用的属性）
				id 			文档内部的唯一标识
				class 	    类
					<div class="first one">one</div>
					<div class="first two">two</div>
					<div class="first three">three</div>
				title 	描述
				style 	样式，取值为css规则
					css规则,键值对，键值之间通过冒号分割，规则之间通过分号分割
					<div id='one' style="color:#333;backgroud:#ededed"></div>
			2)特有属性
				a
					href
					target
				img
					alt
					src
	2) 结构
			doctype 	声明部分 
			html
				head
					不会显示到浏览器视口中
					title		显示在浏览器选项卡
					meta 		用于设置元信息,配置
						charset=utf-8 	
						utf-8 
						编码
							编辑器 UTF-8
						解码
							浏览器 
				body
					网页主体
	3) 元素
			1. 块元素 
				作用：作为页面框架，或者容器。是页面的主体
				特性：
					1) 独占一行空间
					2) 默认宽度为100%，默认高度由子元素或者内容决定 
					3) 可以为其指定宽高 style="width:;height:;" 

					div 	  	无意义的块元素
					h1~h3		标题
					ul、li 		无序列表，列表项	
					ol、li  		有序列表，列表项
					dl、dt、dd 	有序列表
			2. 行内元素
				作用：点缀网页，填充内容
				特性：
					1) 与其他行内元素共享一行空间
					2) 默认宽高由内容决定
					3) 不能为其指定宽和高
					4) 行内元素中不可以嵌套块元素，但块元素中可以嵌套行内元素
				span 	无意义的行内元素
				a 		超级链接（axure open link）
				img
					src 	图片地址
						url
						相对路径
						绝对路径
					alt 	图片找不到的时候文本替换
			3. 功能元素	（行内元素）
				1) 表格
				2) 表单（前后台交互）
					<form action="">
						input
						select
						textarea
					</form>
					form
						action 	后台接口地址
						method 	请求方式
							get
								参数拼接在url后面，通过?来分割
								传递参数较少
								查询学生信息、通过id删除学生信息、
							post
								参数存放在请求体中，安全
								传递参数更多
								保存或者更新学生信息、批量删除
					input
						name: 			不能省略，作为参数中的key
						value: 			作为参数中的value,在按钮中务必指定value值
						type:
							text 		单行文本框
							password 	密码框
							submit 		提交按钮
							file 		附件选择器
							radio 		单选按钮
							checkbox 	复选按钮
						checked: 		单值属性	默认选址
						placeholder 提示语
					select
						option
					textarea
						多行文本域
css
1. 介绍
		多个样式表修饰同一个元素
		继承
		优先级
2. 在html应用css
	1) 在元素中添加style属性，style属性值为css样式规则
		<div style="width:100px;height:100px;"></div>
		缺点:样式与结构与杂糅
		优点:简单直接，优先级高 
	2) 将样式添加到head标签中的style标签里
	3) 将样式定义在css文件中，通过link导入进来
3. 选择器
	1. 核心选择器
		标签选择器 	
			div
		id选择器
			#jj
		class选择器
			.jj
		逗号选择器
			div,#jj
			ul,ol
		组合选择器
			div#jj
		普遍选择器
			*	不单独使用
	2. 层次选择器
		子元素选择器
			.nav > ul > li {}
		后代选择器
			.nav li {}
		下一个兄弟选择器
			.products > li.ios + *{}
		之后所有兄弟选择器
			.products > li.ios ~ *{}
	3. 属性选择器,过滤（表单元素）
		selector[]
		input[placeholder]
		input[type=text]
		input[type^=t]
		input[type$=t]
		input[type*=t]
	4. 伪类选择器,过滤器
		与状态相关
			:link  		a标签还未被访问
			:hover 		光标悬浮到元素上
			:active 	a标签激活
			:visited 	a标签访问过
		与子元素相关
			:first-child
			:last-child
			:nth-child(v)
				v 为数字，公式
			:first-of-type
			:last-of-type
			:nth-of-type
	5. 伪元素
		::after
		::before
		副作用：在dom节点中产生一个新节点
4. 规则
	1). 字体样式(可以被继承)
		font-family:"微软雅黑","Microsoft YaHei","宋体",serif;
		font-size:12px;		字体大小
			浏览器默认字体为16px
		font-weight:bold;	字体粗细
		font-style:normal;	是否开启斜体
			italic
		line-height:2em; 行高
	2). 盒子样式(盒子，块元素)
		width
		height
		margin-top
		margin-right
		margin-bottom
		margin-left
		margin
			margin:10px;		上右下左	
			margin:0 10px; 	上下为0，左右10px
			margin:0 5px 10px; 	上0，左右5px，下10px
			margin:0 5px 10px 15px; 	上右下左	

		border-top-style 		边框线类型
		border-top-width 		边框宽度
		border-top-color 		边框线颜色
		border-top

		border-right-style 		边框线类型
		border-right-width 		边框宽度
		border-right-color 		边框线颜色
		border-right

		border-bottom-style 	边框线类型
		border-bottom-width 	边框宽度
		border-bottom-color 	边框线颜色
		border-bottom

		border-left-style 		边框线类型
		border-left-width 		边框宽度
		border-left-color 		边框线颜色
		border-left

		border-color
		border-style
		border-width

		border:1px solid #ededed;*

		padding-top
		padding-right
		padding-bottom
		padding-left
		padding

		box-shadow: 5px 5px 10px #ccc;
		box-shadow:inset 0 0 3px lightblue;

		border-radius 		圆角半径

		background-origin 	背景铺设的起点
			border-box 		边框下
			padding-box 	内边距下
			content-box 	内容下
		background-image 	背景图片
			url
		background-repeat 	背景重复方式
			repeat-x
			repeat-y
			no-repeat
		background-color 	背景颜色
		background-position 背景位置
			center
			top left
			10px 20px
		background-clip 	背景裁切方式
			border-box 		边框下
			padding-box 	内边距下
			content-box 	内容下
		background 			速写
			background:url('') no-repeat center;
			background-size:cover;
			=>
			background:center/cover padding-box url('') no-repeat ;
		一个盒子的组成：
			外边距 	 	margin
			边框 		border
			内边距 		padding
			内容 		存放子元素或者内容的区域
		盒子计算方式
			box-sizing:content-box;内容盒子（传统盒子）
				width = 内容宽
				height = 内容高
				所占的宽 = border + padding + width
				所占的高 = border + padding + height
			box-sizing:border-box;边框盒子（怪异盒子）
				width = 边框以内所有的和
				width = border + padding + 内容宽
	5. 单位
		颜色
			#333333 	=> #333
			#ededed
			rgb(0,0,0) 	=>#000000
			rgba(0,0,0,0.3)
			渐变
		长度
			绝对单位
				px 
			相对单位
				em 		当前元素上的font-size的值
					font-size:12px ;
					1em = 12px;
					2em = 24px;
				rem
					html{font-size:14px}
					1rem = 14px;
				%
					width 相对于父元素
					border-radius 	相对于当前元素的width
					...
		关键 
			center
			border-box
			content-box
		函数 	
			url()
			rgb()
			rgba()
	6. 选择器优先级
		1000 			style
		100 			#
		10 				. 伪类 属性
		1				元素 伪元素
	7. 布局【*】
		使用块元素搭建页面框架
			块元素独占一行空间
		布局的本质就是让块元素在一行中显示
		1) 浮动布局
			float:left/right
			脱离文档流：
				1) 宽度高度默认由内容决定
				2) 原先所在位置就会被其他块元素抢占
				3) 浮动元素在一行中依次排列，当一行无法容纳的时候会自动换行
			左侧浮动，右侧不浮动
				.content > .left{
					float:left;
					width:220px;
				}
				.content > .right {
					margin-left:230px;
				}
				<div class="content">
					<div class="left"></div>
					<div class="right"></div>
				</div>
		2) 定位布局
			1) 作用：当一个元素悬挂在其他元素之上，优先考虑定位布局
					模态框、下拉菜单、二级菜单、固定宣传栏、网页聊天页面
			2) 用法：
				position:static/ relative / absolute / fixed / 
				static 默认	静态布局，默认文档流中，非定位元素
				relative 	定位元素(相对定位)
					1) 没有脱离文档流
					2) 参照点为当前元素原本的位置
				absolute 	定位元素(绝对定位)
					1) 脱离了文档流
					2) 参照距离当前元素最近的父定位元素，如果所有的父元素都没有定位元素，参照浏览器视口
				fixed 		定位元素(固定定位)
					1) 脱离了文档流
					2) 参照浏览器视口
				sticky 		定位元素(粘滞定位)
					1) 不脱离文档流
					2) relative 和 fixed 的结合
						top:50px
						当当前元素距离浏览器视口顶端为50px的时候，体现fixed的特点
				定位元素的特点
					可以使用描述当前元素位置的属性 top、right、bottom、left
					z-index
					参照点
					是否脱离文档流
		3) 伸缩盒布局
			1) 作用：使得子元素在父元素中分列显示，与float的作用类似。一般用于响应式布局
			2) 用法
				1. 父元素在主轴上一定要有一个固定的宽/高
				2. 子元素在交叉轴上默认宽/高占满父元素
					如果主轴为x轴，那么资源的默认高度占满父元素
					如果主轴为y轴，那么资源的默认宽度占满父元素
				ul 伸缩盒
					1)设置父元素为伸缩盒 (display)
						flex
					2) 主轴 （flex-direction）
						主轴 	默认情况下为x轴 	
							row 【左中右】/column【上中下】
						交叉轴 默认情况下为y轴 
						元素沿着伸缩盒的主轴排列的
					3) 伸缩盒自动换行（flex-wrap）
						子元素宽度和大于父元素的时候是否换行
							nowrap 	默认值，不换行
							wrap 		换行
				li 伸缩盒的元素
					1) 基础值
						flex-basis 	主轴上元素的基础值(宽/高)
					2) 对盈余空间的分配
						flex-grow
					3) 对亏损空间的贡献
						flex-shrink:
					4) 速写
						flex: grow shrink basis;
	8. 动画
		1) 动画定义
			@keyframes 动画名称{
				from {

				}
				to{

				}
			}
			=》
			@keyframes 动画名称{
				10% {
					
				}
				20%{

				}
				...
				100%{

				}
			}
		2) 动画应用
			animation-name:			动画名称
			animation-duration:		动画持续时间
			animation-delay: 		动画的延迟
			animation-direction 	动画运动方向
				reverse
				alternate
			animation-fill-mode: 	动画结束后保留哪个样式
				forwards			保留最后一帧的样式
				backwards 			保留第一帧的样式
			animation-iteration-count: 	动画执行的次数
				infinite
			animation-timing-function: 	动画执行的时间曲线
				linear
				steps
			animation-play-state: 		动画播放状态
				running
				paused
			animation:	
				速写形式 
			animation: 4s linear 0s infinite alternate move_eye
	9. 过渡效果
		transition
		1) transition和animation的区别
			1. transition必须要触发，一般使用:hover
			2. transition不需要设置关键帧
			简单的过渡效果使用transition，复杂的动画使用animation
		2) 用法
			transition-property 	指定过渡的属性
				可以指定一个属性 		width
				可以指定多个属性		width,background
				可以指定所有属性 		all
			transition-duration 	过渡持续的时间
				可以指定秒，以及毫秒 	s /ms
			transition-timing-function 	过渡的时间曲线
			transition-delay 			过渡延迟
				可以指定秒，以及毫秒 	s /ms
			transition 					速写
				transition:property duration timing delay;
				例：
				transition: margin-right 2s ease-in-out .5s;
	10. 变形(transform:)
			scale(2)				变大
			skewX(45deg) 		倾斜
			skewY(45deg) 		倾斜
			skew(45deg) 		倾斜
			rotate(45deg)		旋转
			rotateX(45deg)		旋转
			rotateY(45deg)		旋转
			rotateZ(45deg)		旋转
			translateX(200px) 	
			translateY(300px) 	
			translate(200px,300px)	